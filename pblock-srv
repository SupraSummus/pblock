#!/usr/bin/env python

import argparse
import fcntl
import logging
import pblock
import sys


parser = argparse.ArgumentParser(description="Serve a file using pblock connection.")
parser.add_argument(
    "-r", "--reading-stream",
    dest='reading_stream', default=3, type=str,
    help="stream for reading from client, when numeric it's treated as fd (default fd 3)",
)
parser.add_argument(
    "-w", "--writing-stream",
    dest='writing_stream', default=3, type=str,
    help="stream for writing to client, when numeric it's treated as fd (default fd 3)",
)
parser.add_argument(
    "-v", "--verbose",
    dest='verbose_count', action='count', default=0,
    help="increases log verbosity for each occurence",
)
parser.add_argument(
    "-f", "--offset",
    dest='offset', default=0, type=int,
    help="address of first file byte",
)
parser.add_argument(
    "file", type=argparse.FileType('r+b'),
    help="file to serve",
)


class FileServer(pblock.ConnectionToClient):
    def __init__(self, file, offset=0, **kwargs):
        super().__init__(**kwargs)
        self.file = file
        self.offset = offset

    def handle_transaction(self, *args, **kwargs):
        """ Original transaction handling wrapped with file exclusive locking. """
        fcntl.lockf(self.file.fileno(), fcntl.LOCK_EX)
        try:
            return super().handle_transaction(*args, **kwargs)
        finally:
            # some funky logic
            # this actually gets executed before return but before super().handle_transaction(...)
            self.file.flush()
            fcntl.lockf(self.file.fileno(), fcntl.LOCK_UN)

    def handle_read(self, offset, size):
        self.send_write_header(offset, size)
        if size <= 0:
            self.writing_stream.flush()
            return True

        # file is served at offset
        offset -= self.offset

        if offset < 0:
            # we are before file
            s = min(-offset, size)
            logging.debug("writing %d zero-bytes (requested before file)", s)
            self.writing_stream.write(bytearray(s))
            offset += s
            size -= s

        if size <= 0:
            self.writing_stream.flush()
            return True

        off = self.file.seek(offset)
        if off == offset:
            logging.debug("writing %d bytes from file at offset %d", size, offset)
            read = pblock.move_between_fds(
                self.file.fileno(),
                self.writing_stream.fileno(),
                size,
            )
            offset += read
            size -= read

        if size <= 0:
            self.writing_stream.flush()
            return True

        # we are after file
        logging.debug("writing %d zero-bytes (requested after file)", size)
        self.writing_stream.write(bytearray(size))
        self.writing_stream.flush()
        return True

    def handle_write_header(self, offset, size):
        if size <= 0:
            return True

        # file is served at offset
        offset -= self.offset

        if offset < 0:
            # we are before file
            s = min(-offset, size)
            logging.warning("discarding %d bytes written before file", s)
            self.read(s)
            offset += s
            size -= s

        if size <= 0:
            return True

        off = self.file.seek(offset)
        if off == offset:
            logging.debug("writing %d bytes to file at offset %d", size, offset)
            written = pblock.move_between_fds(
                self.reading_stream.fileno(),
                self.file.fileno(),
                size,
            )
            offset += written
            size -= written

        if size <= 0:
            return True

        # we are after file
        logging.warning("discarding %d bytes written after file", size)
        self.read(size)
        return True


if __name__ == '__main__':
    arguments = parser.parse_args()

    # Sets log level to WARN going more verbose for each new -v.
    logging.basicConfig(
        format='%(process)d %(levelname)s: %(message)s',
        level=max(3 - arguments.verbose_count, 0) * 10,
    )

    logging.info("running with commandline %s", sys.argv)

    c = FileServer(
        reading_stream=arguments.reading_stream,
        writing_stream=arguments.writing_stream,
        file=arguments.file,
        offset=arguments.offset,
    )
    c.run()

    logging.info("exiting successfuly")
    sys.exit()
