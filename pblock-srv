#!/usr/bin/env python

import argparse
import logging
import pblock
import sys


parser = argparse.ArgumentParser(description="Serve a file using pblock connection.")
parser.add_argument(
    "-r", "--reading-stream",
    dest='reading_stream', default=3, type=str,
    help="stream for reading from client, when numeric it's treated as fd (default fd 3)",
)
parser.add_argument(
    "-w", "--writing-stream",
    dest='writing_stream', default=3, type=str,
    help="stream for writing to client, when numeric it's treated as fd (default fd 3)",
)
parser.add_argument(
    "-v", "--verbose",
    dest='verbose_count', action='count', default=0,
    help="increases log verbosity for each occurence",
)
parser.add_argument(
    "file", type=argparse.FileType('r+b'),
    help="file to serve",
)


class FileServer(pblock.ConnectionToClient):
    def __init__(self, file, **kwargs):
        super().__init__(**kwargs)
        self.file = file

    def handle_read(self, offset, size):
        self.send_write_header(offset, size)
        off = self.file.seek(offset)
        if off != offset:
            self.writing_stream.write(bytearray(size))
        else:
            read = pblock.move_between_fds(self.file.fileno(), self.writing_stream.fileno(), size)
            if read < size:
                self.writing_stream.write(bytearray(size - read))
        self.writing_stream.flush()
        return True


if __name__ == '__main__':
    arguments = parser.parse_args()

    # Sets log level to WARN going more verbose for each new -v.
    logging.basicConfig(
        format='%(process)d %(levelname)s: %(message)s',
        level=max(3 - arguments.verbose_count, 0) * 10,
    )

    logging.info("pblock-srv running with commandline {}".format(sys.argv))

    c = FileServer(
        reading_stream=arguments.reading_stream,
        writing_stream=arguments.writing_stream,
        file=arguments.file,
    )
    c.run()

    logging.info("pblock-srv exiting successfuly")
    sys.exit()
