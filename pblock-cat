#!/usr/bin/env python

import argparse
import logging
import pblock
import sys


parser = argparse.ArgumentParser(description="Read range from pblock connection.")
parser.add_argument(
    "-o", "--output",
    dest='output', default=sys.stdout.buffer, type=argparse.FileType('wb'),
    help="where to print received data (dafult stdout)",
)
parser.add_argument(
    "-f", "--offset",
    dest='offset', default=0, type=int,
    help="offset (in bytes) to start reading at",
)
parser.add_argument(
    "count", type=int,
    help="read at most this many bytes",
)
parser.add_argument(
    "-r", "--reading-stream",
    dest='reading_stream', default=3, type=str,
    help="stream for reading from server, when numeric it's treated as fd (default fd 3)",
)
parser.add_argument(
    "-w", "--writing-stream",
    dest='writing_stream', default=3, type=str,
    help="stream for writing to server, when numeric it's treated as fd (default fd 3)",
)
parser.add_argument(
    "-v", "--verbose",
    dest='verbose_count', action='count', default=0,
    help="increases log verbosity for each occurence",
)


class CatClient(pblock.ConnectionToServer):
    def __init__(self, output, offset, size, **kwargs):
        super().__init__(**kwargs)
        self.output = output
        self.offset = offset
        self.size = size

    def run(self):
        self.send_read(self.offset, self.size)
        self.send_commit()
        self.handle_transaction()

    def handle_write_header(self, offset, size):
        assert offset == self.offset, "incoming transmission is not coherent"
        assert size <= self.size, "incoming transmission is larger than requested"
        sent = pblock.move_between_fds(self.reading_stream.fileno(), self.output.fileno(), size)
        assert sent == size, "couldn't move all of data to output"
        self.offset += size
        self.size -= size
        return True



if __name__ == '__main__':
    arguments = parser.parse_args()

    # Sets log level to WARN going more verbose for each new -v.
    logging.basicConfig(
        format='%(process)d %(levelname)s: %(message)s',
        level=max(3 - arguments.verbose_count, 0) * 10,
    )

    logging.info("pblock-cat running with commandline {}".format(sys.argv))

    c = CatClient(
        reading_stream=arguments.reading_stream,
        writing_stream=arguments.writing_stream,
        output=arguments.output,
        offset=arguments.offset,
        size=arguments.count,
    )
    c.run()
    assert c.size == 0, "not whole requested range was transmitted"

    logging.info("pblock-cat exiting successfuly")
    sys.exit()
