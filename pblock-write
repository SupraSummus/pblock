#!/usr/bin/env python

import argparse
import logging
import pblock
import sys


parser = argparse.ArgumentParser(description="Write range to pblock connection.")
parser.add_argument(
    "-i", "--input",
    dest='input', default=sys.stdin.buffer, type=argparse.FileType('rb'),
    help="data source (dafult stdout)",
)
parser.add_argument(
    "-f", "--offset",
    dest='offset', default=0, type=int,
    help="offset (in bytes) to start writing at",
)
parser.add_argument(
    "count", type=int,
    help="write this many bytes",
)
parser.add_argument(
    "-r", "--reading-stream",
    dest='reading_stream', default=3, type=str,
    help="stream for reading from server, when numeric it's treated as fd (default fd 3)",
)
parser.add_argument(
    "-w", "--writing-stream",
    dest='writing_stream', default=3, type=str,
    help="stream for writing to server, when numeric it's treated as fd (default fd 3)",
)
parser.add_argument(
    "-v", "--verbose",
    dest='verbose_count', action='count', default=0,
    help="increases log verbosity for each occurence",
)


class WriteClient(pblock.ConnectionToServer):
    def __init__(self, input, offset, size, **kwargs):
        super().__init__(**kwargs)
        self.input = input
        self.offset = offset
        self.size = size

    def run(self):
        self.send_write_header(self.offset, self.size)
        written = pblock.move_between_fds(
            self.input.fileno(),
            self.writing_stream.fileno(),
            self.size,
        )
        if written < self.size:
            self.writing_stream.write(bytearray(self.size - written))
        self.send_commit()
        self.handle_transaction()


if __name__ == '__main__':
    arguments = parser.parse_args()

    # Sets log level to WARN going more verbose for each new -v.
    logging.basicConfig(
        format='%(process)d %(levelname)s: %(message)s',
        level=max(3 - arguments.verbose_count, 0) * 10,
    )

    logging.info("running with commandline %s", sys.argv)

    c = WriteClient(
        reading_stream=arguments.reading_stream,
        writing_stream=arguments.writing_stream,
        input=arguments.input,
        offset=arguments.offset,
        size=arguments.count,
    )
    c.run()

    logging.info("exiting successfuly")
    sys.exit()
